# --- Source report details (Report that is NOT downloadable) ---

$SourceWorkspaceId = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX"
$SourceReportId    = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX"

# --- Target report (Report that IS downloadable and you want to replace with the visuals from the non-downloadable report) ---
$TargetReportId    = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX"


#----Change below if the report you're updating is in a different workspace----
$TargetWorkspaceId = $SourceWorkspaceId 

# --- Fixed export base path - this just will autodownload a copy of your new report at the end - it will still be available in the service as well ---
$exportBasePath = "C:\Power BI Backups"

# Ensure required modules are installed, and imports them. If import fails, error and exit early
$requiredModules = @('MicrosoftPowerBIMgmt' )
foreach ($module in $requiredModules) {
    if( -not (Import-Module $module -PassThru -EA ignore) ) {
       Install-Module -Name $module -Scope CurrentUser -Force
    }

    Import-Module $Module -ErrorAction 'stop' # In the rare case Install-Module fails, you probably want a terminating error
}

# ========================================================
# TOKEN MANAGEMENT
# ========================================================

function Connect-PowerBI {
    Write-Host "Connecting to Power BI..."
    Connect-PowerBIServiceAccount | Out-Null
    $global:accessTokenObject = Get-PowerBIAccessToken
    $global:accessToken = $accessTokenObject.Authorization -replace 'Bearer ', ''
    Set-Content -Path "$env:TEMP\PowerBI_AccessToken.txt" -Value $global:accessToken
    Write-Host "Power BI access token acquired and stored."
}

function Start-TokenRefreshJob {
    if (Get-Job -Name "TokenRefreshJob" -ErrorAction SilentlyContinue) { return }
    Write-Host "Starting background token refresh job..."
    $jobScript = {
        Import-Module MicrosoftPowerBIMgmt.Profile
        function Connect-PowerBI {
            Connect-PowerBIServiceAccount | Out-Null
            $global:accessTokenObject = Get-PowerBIAccessToken
            $global:accessToken = $accessTokenObject.Authorization -replace 'Bearer ', ''
            Set-Content -Path "$env:TEMP\PowerBI_AccessToken.txt" -Value $global:accessToken
        }
        while ($true) {
            Start-Sleep -Seconds 3300  # 55 minutes
            Connect-PowerBI
        }
    }
    Start-Job -ScriptBlock $jobScript -Name "TokenRefreshJob" | Out-Null
}

function Get-CurrentAccessToken {
    return (Get-Content -Path "$env:TEMP\PowerBI_AccessToken.txt" -ErrorAction SilentlyContinue)
}

# Initialize connection and background refresh
Connect-PowerBI
Start-TokenRefreshJob

# ========================================================
# MAIN SCRIPT
# ========================================================

$pbiApiBaseUri = "https://api.powerbi.com/v1.0/myorg"

# Prepare headers
$accessToken = Get-CurrentAccessToken
$headers = @{
    "Content-Type"  = "application/json"
    "Authorization" = "Bearer $accessToken"
}

# --- Step 0: Retrieve source report name ---
Write-Host "Retrieving source report name..."
$sourceReportDetails = Invoke-RestMethod -Uri "$pbiApiBaseUri/groups/$SourceWorkspaceId/reports/$SourceReportId" -Headers $headers -Method GET
$sourceReportName = $sourceReportDetails.name
$cleanName = ($sourceReportName -replace '[\\/:*?"<>|]', '') + " - Downloadable.pbix"

# Construct export path
$OutFile = Join-Path $exportBasePath $cleanName

# Ensure export directory exists
if (-not (Test-Path $exportBasePath)) {
    Write-Host "Creating export directory: $exportBasePath"
    New-Item -Path $exportBasePath -ItemType Directory | Out-Null
}

# --- Step 1: Copy content from source → targetthe 
$updateEndpoint = "$pbiApiBaseUri/groups/$TargetWorkspaceId/reports/$TargetReportId/UpdateReportContent"
$body = @"
{
  "sourceReport": {
    "sourceReportId": "$SourceReportId",
    "sourceWorkspaceId": "$SourceWorkspaceId"
  },
  "sourceType": "ExistingReport"
}
"@

Write-Host "Copying report content from Source ($SourceReportId) to Target ($TargetReportId)..."
Invoke-RestMethod -Uri $updateEndpoint -Method POST -Headers $headers -Body $body -ContentType "application/json"
Write-Host "Report content successfully updated."

# --- Step 2: Export target report safely ---
if (Test-Path $OutFile) {
    Write-Host "Existing export found at $OutFile — deleting old file..."
    Remove-Item -Path $OutFile -Force
}

Write-Host "Exporting target report PBIX to $OutFile..."
Export-PowerBIReport -WorkspaceId $TargetWorkspaceId -Id $TargetReportId -OutFile $OutFile
Write-Host "Done! Exported to: $OutFile"

# ========================================================
# CLEANUP
# ========================================================
# Stop the background job after script completion

Stop-Job -Name "TokenRefreshJob"
Remove-Job -Name "TokenRefreshJob"

Write-Host "Script completed successfully."
 
